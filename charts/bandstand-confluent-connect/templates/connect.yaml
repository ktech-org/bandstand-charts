{{- $relName := .Release.Name -}}
{{- if .Values.nameSuffix }}
{{- $relName = print .Release.Name "-" .Values.nameSuffix }}
{{- end }}
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: {{ $relName }}
  labels: {{- include "bandstand-confluent-connect.labels" . | nindent 4 }}
spec:
  replicas: 1
  image:
    application: {{ .Values.applicationImage }}
    init: {{ .Values.initImage }}
    pullPolicy: Always
  build:
    type: onDemand
    onDemand:
      plugins:
        locationType: confluentHub
        confluentHub:
        {{- range $k, $v := .Values.connectPlugins }}
          - name: {{ (split "/" $k)._1 }}
            owner: {{ (split "/" $k)._0 }}
            version: {{ $v }}
        {{- end }}
  podTemplate:
    annotations:
      ad.datadoghq.com/{{ $relName }}.checks: |
        {
          "confluent_platform": {
            "init_config": {
              "is_jmx": true,
              "collect_default_metrics": false
              "conf": {
                "include": {
                  "confluent.kafka.connect.source_task.source_record_write_total",
                  "confluent.kafka.connect.worker.connector_total_task_count",
                  "confluent.kafka.connect.worker.connector_running_task_count",
                  "confluent.kafka.connect.source_task.source_record_write_rate",
                  "confluent.kafka.connect.worker.connector_count",
                  "confluent.kafka.connect.connector_metrics.status",
                  "confluent.kafka.connect.connect_metrics.outgoing_byte_rate",
                  "confluent.kafka.connect.source_task.source_record_poll_total",
                  "confluent.kafka.connect.source_task.source_record_poll_rate",
                  "confluent.kafka.connect.connect_metrics.incoming_byte_rate"
                }
              }
            },
            "instances": [{
              "host": "%%host%%",
              "port": "7203",
            }]
          }
        }
    serviceAccountName: {{ $relName }}
    resources:
      requests:
        cpu: {{ .Values.resources.requests.cpu }}
        memory: {{ .Values.resources.requests.memory }}
        ephemeral-storage: {{ .Values.resources.requests.ephemeralStorage }}
      limits:
        {{- if .Values.enforceCpuLimits }}
        cpu: {{ .Values.resources.requests.cpu }}
        {{- end }}
        memory: {{ .Values.resources.requests.memory }}
        ephemeral-storage: {{ .Values.resources.requests.ephemeralStorage }}
  dependencies:
    kafka:
      bootstrapEndpoint: {{ .Values.bootstrapEndpoint }}
      authentication:
        type: plain
        jaasConfig:
          secretRef: {{ $relName }}
      tls:
        enabled: true
        ignoreTrustStoreConfig: true
    schemaRegistry:
      url: {{ .Values.schemaRegistryUrl }}
      authentication:
        type: basic
        basic:
          secretRef: {{ $relName }}
