{{- $relName := include "bandstand-web-service.fullname" $ -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $relName }}
  labels: {{- include "bandstand-web-service.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "bandstand-web-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
        {{- if ((((.Values.resources).requests).linkerd).memory) }}
        config.linkerd.io/proxy-memory-limit: {{ .Values.resources.requests.linkerd.memory }}
        config.linkerd.io/proxy-memory-request: {{ .Values.resources.requests.linkerd.memory }}
        {{- end }}
        config.alpha.linkerd.io/proxy-enable-native-sidecar: 'true'
        {{- if (.Values.reloader).enabled }}
        reloader.stakater.com/auto: "true"
        {{- end }}
      labels: {{- include "bandstand-web-service.labels" . | nindent 8 }}
    spec:
      nodeSelector:
      {{- with .Values.nodeSelector }}
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if (.Values.azBalancing).enabled }}
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels: {{- include "bandstand-web-service.selectorLabels" . | nindent 14 }}
      {{- end }}
      serviceAccountName: {{ $relName }}
      containers:
        - name: {{ $relName }}
          image: {{ .Values.dockerRegistry | default .Values.global.dockerRegistry | default "ktechartifacts-docker.jfrog.io" }}/{{ $.Values.imageName | default $relName }}:{{ .Values.global.image.tag }}
          imagePullPolicy: Always
          {{- $serverContainer := .Values.serverContainer | default dict }}
          {{- if $serverContainer.command }}
          command: {{ $serverContainer.command }}
          {{- end }}
          {{- if $serverContainer.arguments }}
          args:
          {{- range $serverContainer.arguments }}
          - {{ . }}
          {{- end }}
          {{- end }}
          {{- if (.Values.preStopWait).service }}
          lifecycle:
            preStop:
              exec:
                command: [ "/bin/sh","-c","sleep {{ .Values.preStopWait.service }}" ]
          {{- end }}
          ports:
            - name: http
              containerPort:  {{ .Values.containerPort | default 8080 }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
              readOnly: false
            {{- range .Values.config }}
            - name: config
              mountPath: {{ .path }}/{{ .filename }}
              subPath: {{ .filename }}
              readOnly: true
            {{- end }}
            {{- range .Values.envConfig }}
            - name: env-config
              mountPath: {{ .path }}/{{ .filename }}
              subPath: {{ .filename }}
              readOnly: true
            {{- end }}
            {{- if (.Values.volume).persistent }}
            - name: {{ $relName }}
              mountPath: "/var/{{ $relName }}"
            {{- end }}
            {{- if .Values.s3Volumes }}
            {{- range .Values.s3Volumes }}
            - name: {{ .name | default "s3-volume" }}
              mountPath: {{ .mountPath | default "/mnt/s3" }}
              readOnly: true
            {{- end }}
            {{- end }}
          resources:
            requests:
              cpu: {{ (.Values.resources).requests.cpu | default "100m" }}
              memory: {{ (.Values.resources).requests.memory | default "512Mi" }}
              ephemeral-storage: {{ (.Values.resources).requests.ephemeralStorage | default "64Mi" }}
            limits:
              {{- if .Values.enforceCpuLimits }}
              cpu: {{ (.Values.resources).requests.cpu | default "100m" }}
              {{- end }}
              memory: {{ (.Values.resources).requests.memory | default "512Mi" }}
              ephemeral-storage: {{ (.Values.resources).requests.ephemeralStorage | default "64Mi" }}
          livenessProbe:
            httpGet:
              path: {{ (.Values.livenessProbe).path | default "/" }}
              port: http
            periodSeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ (.Values.readinessProbe).path | default "/" }}
              port: http
            periodSeconds: 30
            timeoutSeconds: 5
          startupProbe:
            httpGet:
              path: {{ (.Values.livenessProbe).path | default "/" }}
              port: http
            timeoutSeconds: 5
            periodSeconds: 5
            failureThreshold: 30
          env:
            - name: ENV
              value: {{ .Values.global.env }}
            - name: BUSINESS
              value: {{ .Values.global.business | default "none"  }}
            - name: VERSION
              value: {{ .Values.global.image.tag }}
            - name: DD_ENV
              value: {{ .Values.global.env }}
            - name: DD_SERVICE
              value: {{ $relName }}
            - name: DD_VERSION
              value: {{ .Values.global.image.tag }}
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: OTEL_SERVICE_NAME
              value: {{ $relName }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://collector.linkerd-jaeger:4317
            - name: OTEL_PROPAGATORS
              value: b3multi
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: http://$(DD_AGENT_HOST):4317
            - name: OTEL_EXPORTER_OTLP_METRICS_PROTOCOL
              value: grpc
            - name: OTEL_METRICS_EXPORTER
              value: otlp
            - name: OTEL_EXPORTER_OTLP_PROTOCOL
              value: grpc
            - name: OTEL_LOGS_EXPORTER
              value: none
            - name: OTEL_JAVA_DISABLED_RESOURCE_PROVIDERS
              value: io.opentelemetry.sdk.extension.resources.HostResourceProvider,io.opentelemetry.sdk.extension.resources.ContainerResourceProvider
            - name: OTEL_INSTRUMENTATION_MICROMETER_ENABLED
              value: "true"
            - name: OTEL_RESOURCE_PROVIDERS_AWS_ENABLED
              value: "true"
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: service={{ $relName }},env={{ .Values.global.env }}
            - name: AWS_ACCOUNT_ID
              value: {{ .Values.global.aws.account | squote }}
            - name: K8S_POD_UID
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.uid
            - name: K8S_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            {{- if .Values.additionalEnvVars }}
              {{- tpl (.Values.additionalEnvVars | toYaml) $ | trimPrefix "|" | trimPrefix "\n" | nindent 12 }}
            {{- end }}
            {{- if .Values.environmentEnvVars }}
              {{- tpl (.Values.environmentEnvVars | toYaml) $ | trimPrefix "|" | trimPrefix "\n" | nindent 12 }}
            {{- end }}
          {{- if or (.Values.envFrom) (.Values.secrets) }}
          envFrom:
          {{- if .Values.envFrom }}
          {{- .Values.envFrom | toYaml | trimPrefix "|" | trimPrefix "\n" | nindent 12 }}
          {{- end }}
          {{- range .Values.secrets }}
          {{- $secretHash := sha256sum .secret | substr 0 6 }}
          {{- $secretName := list $.Release.Name $.Values.nameSuffix .name $secretHash | join "-" }}
            - secretRef:
                name: {{ $secretName }}
                optional: {{ .optional | default false }}
              {{- if .prefix }}
              prefix: {{ .prefix }}
              {{- end }}
          {{- end }}
          {{- end }}
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
      imagePullSecrets:
        - name: {{ .Values.imagePullSecret | default "rt-docker-config" }}
      volumes:
        {{- if .Values.config }}
        - name: config
          configMap:
            name: {{ $relName }}
            items:
              {{- range .Values.config }}
              - key: {{ .filename }}
                path: {{ .filename }}
              {{- end }}
        {{- end }}
        {{- if .Values.envConfig }}
        - name: env-config
          configMap:
            name: {{ $relName }}-env
            items:
              {{- range .Values.envConfig }}
              - key: {{ .filename }}
                path: {{ .filename }}
              {{- end }}
        {{- end }}
        - name: tmp-dir
        {{- if (.Values.volume).ephemeral }}
          ephemeral:
            volumeClaimTemplate:
              metadata:
                labels:
                  type: temp-volume
              spec:
                accessModes: [ "ReadWriteOnce" ]
                storageClassName: {{ .Values.volume.storageClass | default "general-storage" }}
                resources:
                  requests:
                    storage: {{ .Values.volume.ephemeral }}
        {{- else }}
          emptyDir: {}
        {{- end }}
        {{- if (.Values.volume).persistent }}
        - name: {{ $relName }}
          persistentVolumeClaim:
            claimName: {{ $relName }}
        {{- end }}
        {{- if .Values.s3Volumes }}
        {{- range .Values.s3Volumes }}
        - name: {{ .name | default "s3-volume" }}
          persistentVolumeClaim:
            claimName: {{ printf "%s-%s-pvc" $.Release.Name .name }}
        {{- end }}
      {{- end }}
      securityContext:
        fsGroup: 1000
        {{- if .Values.runAsUser }}
        runAsUser: {{ .Values.runAsUser | default 1000 }}
        {{- else }}
        runAsUser: 1000
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default 30 }}
