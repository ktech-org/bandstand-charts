{{- define "bandstand-web-service.deployment" -}}
{{- $relName := .Release.Name -}}
{{- if .Values.nameSuffix }}
{{- $relName = print .Release.Name "-" .Values.nameSuffix }}
{{- end }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $relName }}
  labels: {{- include "bandstand-web-service.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels: {{- include "bandstand-web-service.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels: {{- include "bandstand-web-service.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ $relName }}
      containers:
        - name: {{ $relName }}
          image: {{ .Values.dockerRegistry | default "067805054192.dkr.ecr.eu-west-1.amazonaws.com" }}/{{ $relName }}:{{ .Values.image.tag }}
          imagePullPolicy: Always
          {{- $serverContainer := .Values.serverContainer | default dict }}
          {{- if $serverContainer.command }}
          command: {{ $serverContainer.command }}
          {{- end }}
          {{- if $serverContainer.arguments }}
          args:
          {{- range $serverContainer.arguments }}
          - {{ . }}
          {{- end }}
          {{- end }}
          ports:
            - name: http
              containerPort:  {{ .Values.containerPort | default 8080 }}
          volumeMounts:
            - name: tmp-dir
              mountPath: /tmp
              readOnly: false
            {{- if or .Values.properties .Values.envProperties }}
            - name: config
              mountPath: "/etc/{{ $relName }}/config"
              readOnly: true
            {{- end }}
          resources:
            requests:
              cpu: {{ (.Values.resources).requests.cpu | default "250m" }}
              memory: {{ (.Values.resources).requests.memory | default "256Mi" }}
            limits:
              cpu: {{ (.Values.resources).limits.cpu | default "500m" }}
              memory: {{ (.Values.resources).limits.memory | default "512Mi" }}
          livenessProbe:
            httpGet:
              path: {{ (.Values.livenessProbe).path | default "/" }}
              port: http
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: {{ (.Values.readinessProbe).path | default "/" }}
              port: http
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 5
          env:
            - name: ENV
              value: {{ .Values.env }}
            - name: VERSION
              value: {{ .Values.image.tag }}
            - name: DD_ENV
              value: {{ .Values.env }}
            - name: DD_SERVICE
              value: {{ $relName }}
            - name: DD_VERSION
              value: {{ .Values.image.tag }}
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: OTEL_SERVICE_NAME
              value: {{ $relName }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: http://collector.linkerd-jaeger:4317
            - name: OTEL_PROPAGATORS
              value: b3multi
            - name: OTEL_EXPORTER_OTLP_METRICS_ENDPOINT
              value: http://$(DD_AGENT_HOST):4317
            - name: OTEL_EXPORTER_OTLP_METRICS_PROTOCOL
              value: grpc
            - name: OTEL_METRICS_EXPORTER
              value: otlp
            - name: OTEL_JAVA_DISABLED_RESOURCE_PROVIDERS
              value: io.opentelemetry.sdk.extension.resources.HostResourceProvider,io.opentelemetry.sdk.extension.resources.ContainerResourceProvider
            {{- if .Values.additionalEnvVars }}
              {{- toYaml .Values.additionalEnvVars | nindent 12 }}
            {{- end }}
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: { { .Values.imagePullSecrets } }
      { { - end } }
      volumes:
        {{- if or .Values.properties .Values.envProperties }}
        - name: config
          configMap:
            name: {{ $relName }}
            items:
              - key: "app.properties"
                path: "app.properties"
        {{- end }}
        - name: tmp-dir
          emptyDir: {}
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
{{- end -}}
